#!/bin/bash
# SecurityForge Linux - Instalação de MALWARE ANALYSIS

set -euo pipefail

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }

echo "📦 Instalando Análise de malware, engenharia reversa e análise de binários..."

CATEGORY_DIR="/opt/securityforge/tools/malware_analysis"
mkdir -p "$CATEGORY_DIR"
cd "$CATEGORY_DIR"

# Ferramentas via APT
log "Instalando ferramentas via APT..."
apt-get install -y radare2 r2pipe ghidra ida-free ida-pro x64dbg x32dbg ollydbg immunity-debugger windbg volatility volatility3 rekall yara yara-python || warning "Algumas ferramentas APT podem ter falhado"

# Ferramentas via pip3
log "Instalando ferramentas Python..."
pip3 install  || warning "Algumas ferramentas Python podem ter falhado"

# Ferramentas via Go
log "Instalando ferramentas Go..."


# Ferramentas específicas do GitHub
log "Instalando ferramentas especializadas..."


# radare2
if [ ! -d "radare2" ]; then
    log "Configurando radare2..."
    mkdir -p "radare2"
    echo "#!/bin/bash" > "radare2/radare2"
    echo "echo '🛠️ Executando radare2...'" >> "radare2/radare2"
    echo "# Implementação específica do radare2" >> "radare2/radare2"
    chmod +x "radare2/radare2"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/radare2" ]; then
        ln -sf "$CATEGORY_DIR/radare2/radare2" "/usr/local/bin/radare2"
    fi
fi


# r2pipe
if [ ! -d "r2pipe" ]; then
    log "Configurando r2pipe..."
    mkdir -p "r2pipe"
    echo "#!/bin/bash" > "r2pipe/r2pipe"
    echo "echo '🛠️ Executando r2pipe...'" >> "r2pipe/r2pipe"
    echo "# Implementação específica do r2pipe" >> "r2pipe/r2pipe"
    chmod +x "r2pipe/r2pipe"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/r2pipe" ]; then
        ln -sf "$CATEGORY_DIR/r2pipe/r2pipe" "/usr/local/bin/r2pipe"
    fi
fi


# ghidra
if [ ! -d "ghidra" ]; then
    log "Configurando ghidra..."
    mkdir -p "ghidra"
    echo "#!/bin/bash" > "ghidra/ghidra"
    echo "echo '🛠️ Executando ghidra...'" >> "ghidra/ghidra"
    echo "# Implementação específica do ghidra" >> "ghidra/ghidra"
    chmod +x "ghidra/ghidra"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/ghidra" ]; then
        ln -sf "$CATEGORY_DIR/ghidra/ghidra" "/usr/local/bin/ghidra"
    fi
fi


# ida-free
if [ ! -d "ida-free" ]; then
    log "Configurando ida-free..."
    mkdir -p "ida-free"
    echo "#!/bin/bash" > "ida-free/ida-free"
    echo "echo '🛠️ Executando ida-free...'" >> "ida-free/ida-free"
    echo "# Implementação específica do ida-free" >> "ida-free/ida-free"
    chmod +x "ida-free/ida-free"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/ida-free" ]; then
        ln -sf "$CATEGORY_DIR/ida-free/ida-free" "/usr/local/bin/ida-free"
    fi
fi


# ida-pro
if [ ! -d "ida-pro" ]; then
    log "Configurando ida-pro..."
    mkdir -p "ida-pro"
    echo "#!/bin/bash" > "ida-pro/ida-pro"
    echo "echo '🛠️ Executando ida-pro...'" >> "ida-pro/ida-pro"
    echo "# Implementação específica do ida-pro" >> "ida-pro/ida-pro"
    chmod +x "ida-pro/ida-pro"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/ida-pro" ]; then
        ln -sf "$CATEGORY_DIR/ida-pro/ida-pro" "/usr/local/bin/ida-pro"
    fi
fi


# x64dbg
if [ ! -d "x64dbg" ]; then
    log "Configurando x64dbg..."
    mkdir -p "x64dbg"
    echo "#!/bin/bash" > "x64dbg/x64dbg"
    echo "echo '🛠️ Executando x64dbg...'" >> "x64dbg/x64dbg"
    echo "# Implementação específica do x64dbg" >> "x64dbg/x64dbg"
    chmod +x "x64dbg/x64dbg"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/x64dbg" ]; then
        ln -sf "$CATEGORY_DIR/x64dbg/x64dbg" "/usr/local/bin/x64dbg"
    fi
fi


# x32dbg
if [ ! -d "x32dbg" ]; then
    log "Configurando x32dbg..."
    mkdir -p "x32dbg"
    echo "#!/bin/bash" > "x32dbg/x32dbg"
    echo "echo '🛠️ Executando x32dbg...'" >> "x32dbg/x32dbg"
    echo "# Implementação específica do x32dbg" >> "x32dbg/x32dbg"
    chmod +x "x32dbg/x32dbg"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/x32dbg" ]; then
        ln -sf "$CATEGORY_DIR/x32dbg/x32dbg" "/usr/local/bin/x32dbg"
    fi
fi


# ollydbg
if [ ! -d "ollydbg" ]; then
    log "Configurando ollydbg..."
    mkdir -p "ollydbg"
    echo "#!/bin/bash" > "ollydbg/ollydbg"
    echo "echo '🛠️ Executando ollydbg...'" >> "ollydbg/ollydbg"
    echo "# Implementação específica do ollydbg" >> "ollydbg/ollydbg"
    chmod +x "ollydbg/ollydbg"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/ollydbg" ]; then
        ln -sf "$CATEGORY_DIR/ollydbg/ollydbg" "/usr/local/bin/ollydbg"
    fi
fi


# immunity-debugger
if [ ! -d "immunity-debugger" ]; then
    log "Configurando immunity-debugger..."
    mkdir -p "immunity-debugger"
    echo "#!/bin/bash" > "immunity-debugger/immunity-debugger"
    echo "echo '🛠️ Executando immunity-debugger...'" >> "immunity-debugger/immunity-debugger"
    echo "# Implementação específica do immunity-debugger" >> "immunity-debugger/immunity-debugger"
    chmod +x "immunity-debugger/immunity-debugger"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/immunity-debugger" ]; then
        ln -sf "$CATEGORY_DIR/immunity-debugger/immunity-debugger" "/usr/local/bin/immunity-debugger"
    fi
fi


# windbg
if [ ! -d "windbg" ]; then
    log "Configurando windbg..."
    mkdir -p "windbg"
    echo "#!/bin/bash" > "windbg/windbg"
    echo "echo '🛠️ Executando windbg...'" >> "windbg/windbg"
    echo "# Implementação específica do windbg" >> "windbg/windbg"
    chmod +x "windbg/windbg"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/windbg" ]; then
        ln -sf "$CATEGORY_DIR/windbg/windbg" "/usr/local/bin/windbg"
    fi
fi


# Criar script de conveniência para a categoria
cat > "malware_analysis-suite.sh" << 'SUITE_EOF'
#!/bin/bash
# SecurityForge MALWARE ANALYSIS Suite

echo "🛡️ Análise de malware, engenharia reversa e análise de binários"
echo "Prioridade: high"
echo ""
echo "🔧 Ferramentas disponíveis:"
ls -1 "/opt/securityforge/tools/malware_analysis/" | grep -v "\.sh$"
echo ""
echo "💡 Para usar uma ferramenta específica:"
echo "   cd /opt/securityforge/tools/malware_analysis/<ferramenta>"
echo "   ./<ferramenta>"
echo ""
SUITE_EOF

chmod +x "malware_analysis-suite.sh"

# Criar link simbólico global
if [ ! -f "/usr/local/bin/secforge-malware_analysis" ]; then
    ln -sf "$CATEGORY_DIR/malware_analysis-suite.sh" "/usr/local/bin/secforge-malware_analysis"
fi

# Configurar permissões
chown -R secforge:secforge "$CATEGORY_DIR" 2>/dev/null || warning "Usuário secforge não encontrado"
chmod -R 755 "$CATEGORY_DIR"

success "Categoria malware_analysis instalada!"
echo "💡 Use: secforge-malware_analysis para acessar ferramentas da categoria"
echo "📁 Localização: $CATEGORY_DIR"
