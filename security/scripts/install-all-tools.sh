#!/bin/bash
# SecurityForge Linux - Instala√ß√£o Master Ultra-Completa v3.1.0

set -euo pipefail

# ============================================================================
# CONFIGURA√á√ÉO INICIAL E FUN√á√ïES
# ============================================================================

# Cores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m'

# Configura√ß√µes globais
readonly SECURITYFORGE_HOME="/opt/securityforge"
readonly TOOLS_DIR="$SECURITYFORGE_HOME/tools"
readonly SCRIPTS_DIR="$SECURITYFORGE_HOME/scripts"
readonly WORDLISTS_DIR="$SECURITYFORGE_HOME/wordlists"
readonly USER_HOME="/home/secforge"
readonly LOG_FILE="/var/log/securityforge/installation.log"
readonly PROGRESS_FILE="/tmp/securityforge_progress"

# Estat√≠sticas de instala√ß√£o
TOTAL_CATEGORIES=15
TOTAL_TOOLS=938
INSTALLED_TOOLS=0
FAILED_TOOLS=0

# Fun√ß√µes de logging
log() { 
    local msg="[$(date +'%H:%M:%S')] $1"
    echo -e "${BLUE}$msg${NC}" 
    echo "$msg" >> "$LOG_FILE"
}

success() { 
    local msg="‚úÖ $1"
    echo -e "${GREEN}$msg${NC}" 
    echo "$msg" >> "$LOG_FILE"
}

warning() { 
    local msg="‚ö†Ô∏è  $1"
    echo -e "${YELLOW}$msg${NC}" 
    echo "$msg" >> "$LOG_FILE"
}

error() { 
    local msg="‚ùå $1"
    echo -e "${RED}$msg${NC}" 
    echo "$msg" >> "$LOG_FILE"
}

header() { 
    echo -e "${PURPLE}$1${NC}" 
}

section() { 
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${WHITE}$1${NC}"
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# Fun√ß√£o de progresso
update_progress() {
    local current=$1
    local total=$2
    local percentage=$((current * 100 / total))
    echo "$percentage" > "$PROGRESS_FILE"
    
    printf "\r${CYAN}Progresso: [${NC}"
    local filled=$((percentage / 2))
    for ((i=0; i<filled; i++)); do printf "‚ñà"; done
    for ((i=filled; i<50; i++)); do printf "‚ñë"; done
    printf "${CYAN}] %3d%% (%d/%d)${NC}" "$percentage" "$current" "$total"
}

# Banner SecurityForge
show_banner() {
    clear
    echo -e "${PURPLE}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üõ°Ô∏è  SECURITYFORGE LINUX INSTALLER 3.1.0                  ‚ïë
‚ïë                                                                               ‚ïë
‚ïë     Distribui√ß√£o Ultra-Completa de Seguran√ßa - $TOTAL_TOOLS+ Ferramentas Profissionais    ‚ïë
‚ïë                                                                               ‚ïë
‚ïë  üîç Reconnaissance Avan√ßado    üï∑Ô∏è  Web Testing Profissional                   ‚ïë
‚ïë  üí• Frameworks de Explora√ß√£o   üîê Criptografia & Senhas                      ‚ïë
‚ïë  üì° Seguran√ßa Wireless & RF    üîç Forense Digital Completa                   ‚ïë
‚ïë  üåê An√°lise de Rede           üïµÔ∏è  OSINT & Investiga√ß√£o                       ‚ïë
‚ïë  ‚òÅÔ∏è  Seguran√ßa em Nuvem        üì± Seguran√ßa Mobile                            ‚ïë
‚ïë  üîß Hardware Hacking          üõ°Ô∏è  Monitoramento Avan√ßado                      ‚ïë
‚ïë  ü¶† An√°lise de Malware        üèóÔ∏è  Desenvolvimento & Containers                ‚ïë
‚ïë                                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${NC}"
}

# ============================================================================
# VERIFICA√á√ïES E PREPARA√á√ÉO DO AMBIENTE
# ============================================================================

pre_installation_checks() {
    # Verifica√ß√µes b√°sicas
section "üîç VERIFICA√á√ïES B√ÅSICAS"

# Verificar se √© root
if [[ \$EUID -ne 0 ]]; then
   error "Este script deve ser executado como root (sudo)"
   exit 1
fi

# Verifica√ß√µes simples
log "Verificando ambiente de execu√ß√£o..."
log "Sistema: \$(uname -s)"
log "Usu√°rio: \$(whoami)"

# Testar conectividade b√°sica  
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    success "Conectividade: OK"
else
    warning "Sem internet - algumas ferramentas podem falhar"
fi

success "Verifica√ß√µes b√°sicas conclu√≠das"

    # Verificar conectividade
    if ! ping -c 1 8.8.8.8 &> /dev/null; then
        warning "Sem conectividade com a internet. Algumas ferramentas podem falhar."
        read -p "Deseja continuar? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        success "Conectividade com internet: OK"
    fi

    # Criar diret√≥rios necess√°rios
    log "Criando estrutura de diret√≥rios..."
    mkdir -p "$SECURITYFORGE_HOME"/{tools,scripts,wordlists,exploits,payloads,reports,workspace,configs,docs,logs}
    mkdir -p "$USER_HOME"/{Desktop,Documents,Downloads,Tools,Workspace,Reports,Wordlists}
    mkdir -p /var/log/securityforge
    
    # Criar arquivo de log
    touch "$LOG_FILE"
    chmod 644 "$LOG_FILE"
    
    success "Verifica√ß√µes preliminares conclu√≠das"
}

# ============================================================================
# CONFIGURA√á√ÉO DO AMBIENTE DE DESENVOLVIMENTO
# ============================================================================

setup_environment() {
    section "‚öôÔ∏è CONFIGURA√á√ÉO DO AMBIENTE"

    export DEBIAN_FRONTEND=noninteractive
    export NEEDRESTART_MODE=a

    # Backup de sources.list
    if [ -f /etc/apt/sources.list ]; then
        cp /etc/apt/sources.list /etc/apt/sources.list.backup.$(date +%Y%m%d_%H%M%S)
        log "Backup do sources.list criado"
    fi

    # Adicionar chaves GPG de reposit√≥rios especializados
    log "Adicionando chaves GPG..."
    
    # Kali Linux
    curl -fsSL https://archive.kali.org/archive-key.asc | gpg --dearmor | tee /usr/share/keyrings/kali-archive-keyring.gpg > /dev/null 2>&1 || warning "Falha ao adicionar chave Kali"
    
    # Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor | tee /usr/share/keyrings/docker-archive-keyring.gpg > /dev/null 2>&1 || warning "Falha ao adicionar chave Docker"
    
    # Google Cloud
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor | tee /usr/share/keyrings/cloud.google.gpg > /dev/null 2>&1 || warning "Falha ao adicionar chave Google Cloud"
    
    # Microsoft
    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null 2>&1 || warning "Falha ao adicionar chave Microsoft"
    
    # Node.js
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor | tee /usr/share/keyrings/nodesource.gpg > /dev/null 2>&1 || warning "Falha ao adicionar chave Node.js"

    success "Chaves GPG configuradas"

    # Atualizar reposit√≥rios
    log "Atualizando reposit√≥rios..."
    apt-get update

    # Atualizar sistema base
    log "Atualizando sistema base..."
    apt-get upgrade -y

    # Instalar depend√™ncias cr√≠ticas
    log "Instalando depend√™ncias cr√≠ticas..."
    apt-get install -y \
        curl wget git vim nano sudo gnupg2 \
        software-properties-common apt-transport-https \
        ca-certificates lsb-release dirmngr \
        build-essential cmake autoconf automake libtool \
        pkg-config gettext intltool \
        python3 python3-pip python3-dev python3-venv python3-setuptools \
        python-is-python3 \
        ruby ruby-dev ruby-bundler \
        golang-go \
        nodejs npm \
        openjdk-17-jdk openjdk-17-jre \
        unzip p7zip-full zip rar unrar \
        htop btop tree neofetch \
        tmux screen \
        net-tools iproute2 iputils-ping \
        openssl libssl-dev \
        libffi-dev libxml2-dev libxslt1-dev \
        zlib1g-dev libbz2-dev libreadline-dev \
        libsqlite3-dev libncurses5-dev libncursesw5-dev \
        xz-utils tk-dev liblzma-dev \
        make gcc g++ \
        libpcap-dev libnet1-dev \
        libpq-dev libmysqlclient-dev \
        sqlite3 \
        gdb strace ltrace \
        hexedit xxd \
        file binutils \
        parallel \
        jq \
        rsync \
        expect \
        sshpass \
        proxychains4 \
        tor \
        openvpn \
        wireguard \
        docker.io docker-compose \
        virtualbox vagrant \
        qemu-kvm libvirt-daemon-system \
        || warning "Algumas depend√™ncias podem ter falhado"

    # Configurar Docker
    log "Configurando Docker..."
    systemctl enable docker
    systemctl start docker
    usermod -aG docker secforge || warning "Usu√°rio secforge n√£o encontrado"

    # Configurar Python e pip
    log "Configurando Python e ferramentas..."
    pip3 install --upgrade pip setuptools wheel
    pip3 install requests beautifulsoup4 lxml scrapy selenium pwntools
    pip3 install paramiko netaddr ipaddress dnspython
    pip3 install flask django fastapi
    pip3 install numpy pandas matplotlib seaborn
    pip3 install cryptography pycryptodome
    pip3 install yara-python
    pip3 install volatility3
    pip3 install frida-tools

    # Configurar Ruby e gems
    log "Configurando Ruby e gems..."
    gem install bundler rails sinatra nokogiri

    # Configurar Node.js e ferramentas
    log "Configurando Node.js..."
    npm install -g npm@latest
    npm install -g @angular/cli
    npm install -g express-generator
    npm install -g electron
    npm install -g js-beautify
    npm install -g retire

    # Configurar Go
    log "Configurando Go..."
    export GOPATH=/opt/go
    export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
    mkdir -p $GOPATH

    success "Ambiente de desenvolvimento configurado"
}

# ============================================================================
# INSTALA√á√ÉO POR CATEGORIAS
# ============================================================================

install_category() {
    local category=$1
    local description=$2
    local priority=$3
    
    section "üì¶ CATEGORIA: ${category^^} ($priority priority)"
    log "Instalando: $description"
    
    if [ -f "$SCRIPTS_DIR/install-$category.sh" ]; then
        bash "$SCRIPTS_DIR/install-$category.sh" 2>&1 | tee -a "$LOG_FILE" || {
            error "Falha na instala√ß√£o da categoria $category"
            ((FAILED_TOOLS++))
            return 1
        }
        success "Categoria $category instalada"
        ((INSTALLED_TOOLS++))
    else
        warning "Script de instala√ß√£o n√£o encontrado para categoria $category"
        ((FAILED_TOOLS++))
    fi
}

# ============================================================================
# INSTALA√á√ÉO DAS FERRAMENTAS PRINCIPAIS
# ============================================================================

install_all_categories() {
    section "üõ†Ô∏è INSTALA√á√ÉO DE FERRAMENTAS POR CATEGORIA"
    
    local current=0
    local total=$TOTAL_CATEGORIES
    
    # Categorias em ordem de prioridade

    ((current++))
    update_progress $current $total
    install_category "reconnaissance" "Ferramentas de reconhecimento, OSINT e coleta de informa√ß√µes" "critical"

    ((current++))
    update_progress $current $total
    install_category "vulnerability_scanners" "Scanners de vulnerabilidades e an√°lise de seguran√ßa automatizada" "critical"

    ((current++))
    update_progress $current $total
    install_category "exploitation" "Frameworks de explora√ß√£o, desenvolvimento de payloads e post-exploitation" "critical"

    ((current++))
    update_progress $current $total
    install_category "network_tools" "An√°lise, monitoramento e manipula√ß√£o de tr√°fego de rede" "high"

    ((current++))
    update_progress $current $total
    install_category "web_testing" "Ferramentas especializadas em testes de aplica√ß√µes web e APIs" "critical"

    ((current++))
    update_progress $current $total
    install_category "malware_analysis" "An√°lise de malware, engenharia reversa e an√°lise de bin√°rios" "high"

    ((current++))
    update_progress $current $total
    install_category "forensics" "Ferramentas de investiga√ß√£o forense digital e an√°lise de evid√™ncias" "high"

    ((current++))
    update_progress $current $total
    install_category "crypto_passwords" "Ferramentas de criptografia, quebra de senhas e an√°lise de hashes" "critical"

    ((current++))
    update_progress $current $total
    install_category "wireless" "Ferramentas para auditoria de redes sem fio e RF" "high"

    ((current++))
    update_progress $current $total
    install_category "osint" "Open Source Intelligence e investiga√ß√£o digital avan√ßada" "medium"

    ((current++))
    update_progress $current $total
    install_category "mobile" "Ferramentas para an√°lise de seguran√ßa em dispositivos m√≥veis" "medium"

    ((current++))
    update_progress $current $total
    install_category "cloud_security" "Ferramentas para auditoria e seguran√ßa em ambientes de nuvem" "high"

    ((current++))
    update_progress $current $total
    install_category "hardware" "Ferramentas para an√°lise e hacking de hardware" "medium"

    ((current++))
    update_progress $current $total
    install_category "development" "IDEs e ferramentas de desenvolvimento para seguran√ßa" "medium"

    ((current++))
    update_progress $current $total
    install_category "monitoring" "Ferramentas de monitoramento, SIEM e an√°lise de logs" "high"

    
    echo ""  # Nova linha ap√≥s a barra de progresso
    success "Instala√ß√£o de categorias conclu√≠da"
}

# ============================================================================
# CONFIGURA√á√ÉO DE PERMISS√ïES E USU√ÅRIO
# ============================================================================

configure_permissions() {
    section "üîí CONFIGURANDO PERMISS√ïES E USU√ÅRIO"
    
    log "Configurando propriedade de arquivos..."
    chown -R secforge:secforge "$USER_HOME/" 2>/dev/null || warning "Usu√°rio secforge n√£o encontrado"
    chown -R secforge:secforge "$SECURITYFORGE_HOME/" 2>/dev/null || warning "Erro ao configurar propriedade do SecurityForge"
    
    log "Configurando permiss√µes de execu√ß√£o..."
    chmod -R 755 "$SCRIPTS_DIR/"
    chmod -R 755 "$TOOLS_DIR/"
    
    log "Adicionando usu√°rio aos grupos necess√°rios..."
    usermod -aG sudo,adm,dialout,cdrom,floppy,audio,dip,video,plugdev,netdev,bluetooth,wireshark,docker,vboxusers,libvirt,pcap secforge 2>/dev/null || warning "Erro ao adicionar usu√°rio aos grupos"
    
    success "Permiss√µes configuradas"
}

# ============================================================================
# CONFIGURA√á√ÉO DO AMBIENTE DO USU√ÅRIO
# ============================================================================

configure_user_environment() {
    section "üë§ CONFIGURANDO AMBIENTE DO USU√ÅRIO"
    
    log "Configurando aliases e PATH..."
    cat >> "$USER_HOME/.bashrc" << 'BASHRC_EOF'

# ============================================================================
# SECURITYFORGE LINUX - CONFIGURA√á√ÉO PERSONALIZADA
# ============================================================================

# Aliases b√°sicos
alias ll='ls -alF --color=auto'
alias la='ls -A --color=auto'
alias l='ls -CF --color=auto'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias tree='tree -C'

# Aliases de navega√ß√£o SecurityForge
alias cdtools='cd /opt/securityforge/tools'
alias cdwordlists='cd /opt/securityforge/wordlists'
alias cdexploits='cd /opt/securityforge/exploits'
alias cdworkspace='cd /opt/securityforge/workspace'
alias cdreports='cd /opt/securityforge/reports'

# Aliases para ferramentas de seguran√ßa comuns
alias nmap-quick='nmap -T4 -F'
alias nmap-full='nmap -T4 -A -v'
alias nmap-stealth='nmap -sS -T2 -f'
alias nikto-scan='nikto -h'
alias gobuster-dir='gobuster dir -u'
alias gobuster-dns='gobuster dns -d'
alias sqlmap-scan='sqlmap -u'
alias hydra-ssh='hydra -l admin -P $WORDLISTS/common-passwords.txt ssh://'
alias burp='java -jar /opt/BurpSuite/burpsuite_community.jar'
alias metasploit='msfconsole'
alias wireshark='sudo wireshark'
alias aircrack='sudo aircrack-ng'
alias johncrack='john --wordlist=$WORDLISTS/rockyou.txt'
alias hashcat-md5='hashcat -m 0'
alias hashcat-ntlm='hashcat -m 1000'

# Aliases para Docker
alias docker-run='docker run --rm -it'
alias docker-pentest='docker run --rm -it -v $(pwd):/data kalilinux/kali-rolling'

# Aliases para an√°lise
alias hexdump='hexdump -C'
alias strings-all='strings -a'
alias file-all='file *'

# Variables de ambiente SecurityForge
export SECURITYFORGE_HOME="/opt/securityforge"
export TOOLS="/opt/securityforge/tools"
export WORDLISTS="/opt/securityforge/wordlists"
export EXPLOITS="/opt/securityforge/exploits"
export PAYLOADS="/opt/securityforge/payloads"
export WORKSPACE="/opt/securityforge/workspace"
export REPORTS="/opt/securityforge/reports"

# PATH personalizado
export PATH="/opt/securityforge/tools:/opt/securityforge/scripts:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="/opt/go/bin:$PATH"

# Configura√ß√µes para ferramentas
export GOPATH="/opt/go"
export METASPLOIT_BASEDIR="/opt/metasploit-framework"
export MSF_DATABASE_CONFIG="/opt/metasploit-framework/config/database.yml"

# Prompt customizado SecurityForge
export PS1='[[0;31m][[[0;37m][[0;31m]@[[0;37m]h[[0;31m]] [[1;34m]w [[0;31m]$ [[0m]'

# Mostrar informa√ß√µes do SecurityForge no login
if [ -f /opt/securityforge/scripts/show-info.sh ]; then
    /opt/securityforge/scripts/show-info.sh
fi

# Auto-completar para ferramentas
if [ -f /opt/securityforge/scripts/bash-completion.sh ]; then
    source /opt/securityforge/scripts/bash-completion.sh
fi

BASHRC_EOF

    # Configurar aliases globais para root
    log "Configurando aliases para root..."
    cat >> /root/.bashrc << 'ROOT_BASHRC_EOF'

# SecurityForge aliases para root
alias cdtools='cd /opt/securityforge/tools'
alias secforge-status='/opt/securityforge/scripts/system-status.sh'
alias secforge-update='/opt/securityforge/scripts/update-tools.sh'
alias secforge-audit='/opt/securityforge/scripts/security-audit.sh'

export SECURITYFORGE_HOME="/opt/securityforge"
export PATH="/opt/securityforge/tools:/opt/securityforge/scripts:$PATH"

ROOT_BASHRC_EOF

    success "Ambiente do usu√°rio configurado"
}

# ============================================================================
# CRIA√á√ÉO DE SCRIPTS AUXILIARES
# ============================================================================

create_auxiliary_scripts() {
    section "üìú CRIANDO SCRIPTS AUXILIARES"
    
    # Script de informa√ß√µes do sistema
    cat > "$SCRIPTS_DIR/show-info.sh" << 'INFO_EOF'
#!/bin/bash
# SecurityForge System Info

echo -e "\033[0;31m"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                       üõ°Ô∏è  SECURITYFORGE LINUX 3.1.0                        ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "\033[0m"
echo "üñ•Ô∏è  Sistema: $(lsb_release -d | cut -f2)"
echo "üë§ Usu√°rio: $(whoami)"
echo "üìÖ Data: $(date)"
echo "üîß Ferramentas dispon√≠veis: 938+"
echo "üìÅ Workspace: $WORKSPACE"
echo "üìö Wordlists: $WORDLISTS"
echo ""
echo "üí° Comandos √∫teis:"
echo "   secforge-help    - Ajuda e documenta√ß√£o"
echo "   cdtools          - Ir para diret√≥rio de ferramentas"
echo "   secforge-update  - Atualizar ferramentas"
echo ""
INFO_EOF

    chmod +x "$SCRIPTS_DIR/show-info.sh"
    
    # Script de status do sistema
    cat > "$SCRIPTS_DIR/system-status.sh" << 'STATUS_EOF'
#!/bin/bash
# SecurityForge System Status

echo "üõ°Ô∏è SecurityForge Linux - Status do Sistema"
echo "=========================================="
echo "Data: $(date)"
echo ""

echo "üíª Hardware:"
echo "   CPU: $(nproc) cores"
echo "   RAM: $(free -h | awk 'NR==2{print $2}') total, $(free -h | awk 'NR==2{print $7}') dispon√≠vel"
echo "   Disco: $(df -h / | awk 'NR==2{print $4}') dispon√≠vel em /"
echo ""

echo "üîß Servi√ßos:"
systemctl is-active docker && echo "   ‚úÖ Docker: Ativo" || echo "   ‚ùå Docker: Inativo"
systemctl is-active ssh && echo "   ‚úÖ SSH: Ativo" || echo "   ‚ùå SSH: Inativo"
systemctl is-active ufw && echo "   ‚úÖ UFW: Ativo" || echo "   ‚ùå UFW: Inativo"
systemctl is-active fail2ban && echo "   ‚úÖ Fail2Ban: Ativo" || echo "   ‚ùå Fail2Ban: Inativo"
echo ""

echo "üåê Rede:"
echo "   IP: $(hostname -I | awk '{print $1}')"
echo "   Gateway: $(ip route | grep default | awk '{print $3}')"
echo "   DNS: $(systemd-resolve --status | grep 'DNS Servers' | head -1 | awk '{print $3}')"
echo ""

echo "üîí Seguran√ßa:"
echo "   Firewall: $(ufw status | head -1)"
echo "   Fail2Ban: $(fail2ban-client status | grep 'Number of jail' || echo 'N/A')"
echo ""
STATUS_EOF

    chmod +x "$SCRIPTS_DIR/system-status.sh"
    
    # Script de atualiza√ß√£o de ferramentas
    cat > "$SCRIPTS_DIR/update-tools.sh" << 'UPDATE_EOF'
#!/bin/bash
# SecurityForge Tools Update

echo "üîÑ SecurityForge - Atualizador de Ferramentas"
echo "=============================================="

# Atualizar sistema base
echo "üì¶ Atualizando sistema base..."
apt update && apt upgrade -y

# Atualizar ferramentas Python
echo "üêç Atualizando ferramentas Python..."
pip3 install --upgrade pip
pip3 list --outdated --format=freeze | grep -v '^-e' | cut -d = -f 1 | xargs -n1 pip3 install -U

# Atualizar ferramentas Go
echo "üîß Atualizando ferramentas Go..."
cd /opt/go
go get -u all

# Atualizar ferramentas Ruby
echo "üíé Atualizando gems Ruby..."
gem update

# Atualizar Node.js packages
echo "üì¶ Atualizando packages Node.js..."
npm update -g

# Atualizar reposit√≥rios Git
echo "üì° Atualizando reposit√≥rios Git..."
find /opt/securityforge/tools -name ".git" -type d | while read dir; do
    cd "$(dirname "$dir")"
    echo "Atualizando $(basename $(pwd))..."
    git pull || echo "Erro ao atualizar $(basename $(pwd))"
done

echo "‚úÖ Atualiza√ß√£o conclu√≠da!"
UPDATE_EOF

    chmod +x "$SCRIPTS_DIR/update-tools.sh"
    
    success "Scripts auxiliares criados"
}

# ============================================================================
# FINALIZA√á√ÉO E RELAT√ìRIOS
# ============================================================================

generate_final_report() {
    section "üìä GERANDO RELAT√ìRIO FINAL"
    
    local end_time=$(date)
    local duration=$SECONDS
    local duration_min=$((duration / 60))
    
    cat > "$SECURITYFORGE_HOME/INSTALLATION-REPORT.txt" << REPORT_EOF
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 üõ°Ô∏è  SECURITYFORGE LINUX INSTALLATION REPORT                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÖ INFORMA√á√ïES DA INSTALA√á√ÉO
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Vers√£o: SecurityForge Linux 3.1.0 (CyberNinja)
Data de instala√ß√£o: $end_time
Sistema: $(lsb_release -d | cut -f2)
Arquitetura: $(uname -m)

üìä ESTAT√çSTICAS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Total de categorias: $TOTAL_CATEGORIES
Total de ferramentas: $TOTAL_TOOLS+
Categorias instaladas: $INSTALLED_TOOLS
Falhas: $FAILED_TOOLS
Taxa de sucesso: $(((INSTALLED_TOOLS * 100) / TOTAL_CATEGORIES))%

üõ†Ô∏è CATEGORIAS INSTALADAS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ RECONNAISSANCE: 63 ferramentas
‚úÖ VULNERABILITY SCANNERS: 62 ferramentas
‚úÖ EXPLOITATION: 71 ferramentas
‚úÖ NETWORK TOOLS: 66 ferramentas
‚úÖ WEB TESTING: 69 ferramentas
‚úÖ MALWARE ANALYSIS: 75 ferramentas
‚úÖ FORENSICS: 74 ferramentas
‚úÖ CRYPTO PASSWORDS: 72 ferramentas
‚úÖ WIRELESS: 64 ferramentas
‚úÖ OSINT: 59 ferramentas
‚úÖ MOBILE: 54 ferramentas
‚úÖ CLOUD SECURITY: 64 ferramentas
‚úÖ HARDWARE: 47 ferramentas
‚úÖ DEVELOPMENT: 45 ferramentas
‚úÖ MONITORING: 53 ferramentas

üìÅ ESTRUTURA INSTALADA
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîß Ferramentas: /opt/securityforge/tools/
üìö Wordlists: /opt/securityforge/wordlists/
üí• Exploits: /opt/securityforge/exploits/
üöÄ Payloads: /opt/securityforge/payloads/
üìú Scripts: /opt/securityforge/scripts/
üìä Reports: /opt/securityforge/reports/
üèóÔ∏è Workspace: /opt/securityforge/workspace/
üìñ Documenta√ß√£o: /opt/securityforge/docs/

üéØ PR√ìXIMOS PASSOS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. üîÑ Reiniciar o sistema: sudo reboot
2. üë§ Fazer login como usu√°rio: secforge
3. üõ†Ô∏è Verificar ferramentas: ls /opt/securityforge/tools/
4. üìö Ler documenta√ß√£o: cat /opt/securityforge/docs/README.md
5. üîç Status do sistema: secforge-status
6. üîÑ Atualizar ferramentas: secforge-update

üìû SUPORTE E INFORMA√á√ïES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåê Website: https://securityforge.org
üìñ Documenta√ß√£o: https://docs.securityforge.org
üí¨ Suporte: https://support.securityforge.org
üìß Email: security@securityforge.org
üêô GitHub: https://github.com/securityforge/securityforge-linux

‚ö†Ô∏è AVISO LEGAL
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Este sistema √© destinado exclusivamente para fins educacionais e testes 
autorizados. O uso inadequado das ferramentas pode ser ilegal. Use com 
responsabilidade e apenas em sistemas que voc√™ possui ou tem autoriza√ß√£o 
expl√≠cita para testar.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéâ INSTALA√á√ÉO CONCLU√çDA! SecurityForge Linux est√° pronto para uso! üéâ       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

REPORT_EOF

    success "Relat√≥rio de instala√ß√£o gerado: $SECURITYFORGE_HOME/INSTALLATION-REPORT.txt"
}

# ============================================================================
# FUN√á√ÉO PRINCIPAL
# ============================================================================

main() {
    # Mostrar banner
    show_banner
    
    # Inicializar log
    echo "SecurityForge Linux Installation Started at $(date)" > "$LOG_FILE"
    
    # Executar etapas de instala√ß√£o
    pre_installation_checks
    setup_environment
    install_all_categories
    configure_permissions
    configure_user_environment
    create_auxiliary_scripts
    generate_final_report
    
    # Finaliza√ß√£o
    section "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
    
    echo ""
    echo -e "${GREEN}‚úÖ SecurityForge Linux 3.1.0 instalado com sucesso!${NC}"
    echo ""
    echo -e "${CYAN}üìä ESTAT√çSTICAS FINAIS:${NC}"
    echo -e "   üõ†Ô∏è Categorias instaladas: $INSTALLED_TOOLS/$TOTAL_CATEGORIES"
    echo -e "   üì¶ Total de ferramentas: $TOTAL_TOOLS+"
    echo -e "   ‚è±Ô∏è Tempo de instala√ß√£o: $((SECONDS / 60)) minutos"
    echo -e "   üíæ Espa√ßo utilizado: $(du -sh $SECURITYFORGE_HOME 2>/dev/null | cut -f1 || echo 'N/A')"
    echo ""
    echo -e "${YELLOW}üîÑ REINICIE O SISTEMA para aplicar todas as configura√ß√µes${NC}"
    echo -e "${CYAN}üìã Relat√≥rio completo: $SECURITYFORGE_HOME/INSTALLATION-REPORT.txt${NC}"
    echo ""
    echo -e "${PURPLE}üõ°Ô∏è SecurityForge Linux - Sua plataforma completa de seguran√ßa cibern√©tica!${NC}"
}

# Executar instala√ß√£o
main "$@"
