#!/bin/bash
# SecurityForge Linux - Instalação de VULNERABILITY SCANNERS

set -euo pipefail

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }

echo "📦 Instalando Scanners de vulnerabilidades e análise de segurança automatizada..."

CATEGORY_DIR="/opt/securityforge/tools/vulnerability_scanners"
mkdir -p "$CATEGORY_DIR"
cd "$CATEGORY_DIR"

# Ferramentas via APT
log "Instalando ferramentas via APT..."
apt-get install -y nessus openvas greenbone-vulnerability-manager nikto w3af skipfish arachni vega nuclei jaeles gau httpx katana paramspider arjun || warning "Algumas ferramentas APT podem ter falhado"

# Ferramentas via pip3
log "Instalando ferramentas Python..."
pip3 install  || warning "Algumas ferramentas Python podem ter falhado"

# Ferramentas via Go
log "Instalando ferramentas Go..."
go install -v github.com/projectdiscovery/nuclei/cmd/nuclei@latest || warning "nuclei falhou"
go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest || warning "httpx falhou"

# Ferramentas específicas do GitHub
log "Instalando ferramentas especializadas..."


# nessus
if [ ! -d "nessus" ]; then
    log "Configurando nessus..."
    mkdir -p "nessus"
    echo "#!/bin/bash" > "nessus/nessus"
    echo "echo '🛠️ Executando nessus...'" >> "nessus/nessus"
    echo "# Implementação específica do nessus" >> "nessus/nessus"
    chmod +x "nessus/nessus"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/nessus" ]; then
        ln -sf "$CATEGORY_DIR/nessus/nessus" "/usr/local/bin/nessus"
    fi
fi


# openvas
if [ ! -d "openvas" ]; then
    log "Configurando openvas..."
    mkdir -p "openvas"
    echo "#!/bin/bash" > "openvas/openvas"
    echo "echo '🛠️ Executando openvas...'" >> "openvas/openvas"
    echo "# Implementação específica do openvas" >> "openvas/openvas"
    chmod +x "openvas/openvas"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/openvas" ]; then
        ln -sf "$CATEGORY_DIR/openvas/openvas" "/usr/local/bin/openvas"
    fi
fi


# greenbone-vulnerability-manager
if [ ! -d "greenbone-vulnerability-manager" ]; then
    log "Configurando greenbone-vulnerability-manager..."
    mkdir -p "greenbone-vulnerability-manager"
    echo "#!/bin/bash" > "greenbone-vulnerability-manager/greenbone-vulnerability-manager"
    echo "echo '🛠️ Executando greenbone-vulnerability-manager...'" >> "greenbone-vulnerability-manager/greenbone-vulnerability-manager"
    echo "# Implementação específica do greenbone-vulnerability-manager" >> "greenbone-vulnerability-manager/greenbone-vulnerability-manager"
    chmod +x "greenbone-vulnerability-manager/greenbone-vulnerability-manager"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/greenbone-vulnerability-manager" ]; then
        ln -sf "$CATEGORY_DIR/greenbone-vulnerability-manager/greenbone-vulnerability-manager" "/usr/local/bin/greenbone-vulnerability-manager"
    fi
fi


# nikto
if [ ! -d "nikto" ]; then
    log "Configurando nikto..."
    mkdir -p "nikto"
    echo "#!/bin/bash" > "nikto/nikto"
    echo "echo '🛠️ Executando nikto...'" >> "nikto/nikto"
    echo "# Implementação específica do nikto" >> "nikto/nikto"
    chmod +x "nikto/nikto"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/nikto" ]; then
        ln -sf "$CATEGORY_DIR/nikto/nikto" "/usr/local/bin/nikto"
    fi
fi


# w3af
if [ ! -d "w3af" ]; then
    log "Configurando w3af..."
    mkdir -p "w3af"
    echo "#!/bin/bash" > "w3af/w3af"
    echo "echo '🛠️ Executando w3af...'" >> "w3af/w3af"
    echo "# Implementação específica do w3af" >> "w3af/w3af"
    chmod +x "w3af/w3af"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/w3af" ]; then
        ln -sf "$CATEGORY_DIR/w3af/w3af" "/usr/local/bin/w3af"
    fi
fi


# skipfish
if [ ! -d "skipfish" ]; then
    log "Configurando skipfish..."
    mkdir -p "skipfish"
    echo "#!/bin/bash" > "skipfish/skipfish"
    echo "echo '🛠️ Executando skipfish...'" >> "skipfish/skipfish"
    echo "# Implementação específica do skipfish" >> "skipfish/skipfish"
    chmod +x "skipfish/skipfish"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/skipfish" ]; then
        ln -sf "$CATEGORY_DIR/skipfish/skipfish" "/usr/local/bin/skipfish"
    fi
fi


# arachni
if [ ! -d "arachni" ]; then
    log "Configurando arachni..."
    mkdir -p "arachni"
    echo "#!/bin/bash" > "arachni/arachni"
    echo "echo '🛠️ Executando arachni...'" >> "arachni/arachni"
    echo "# Implementação específica do arachni" >> "arachni/arachni"
    chmod +x "arachni/arachni"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/arachni" ]; then
        ln -sf "$CATEGORY_DIR/arachni/arachni" "/usr/local/bin/arachni"
    fi
fi


# vega
if [ ! -d "vega" ]; then
    log "Configurando vega..."
    mkdir -p "vega"
    echo "#!/bin/bash" > "vega/vega"
    echo "echo '🛠️ Executando vega...'" >> "vega/vega"
    echo "# Implementação específica do vega" >> "vega/vega"
    chmod +x "vega/vega"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/vega" ]; then
        ln -sf "$CATEGORY_DIR/vega/vega" "/usr/local/bin/vega"
    fi
fi


# nuclei
if [ ! -d "nuclei" ]; then
    log "Configurando nuclei..."
    mkdir -p "nuclei"
    echo "#!/bin/bash" > "nuclei/nuclei"
    echo "echo '🛠️ Executando nuclei...'" >> "nuclei/nuclei"
    echo "# Implementação específica do nuclei" >> "nuclei/nuclei"
    chmod +x "nuclei/nuclei"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/nuclei" ]; then
        ln -sf "$CATEGORY_DIR/nuclei/nuclei" "/usr/local/bin/nuclei"
    fi
fi


# jaeles
if [ ! -d "jaeles" ]; then
    log "Configurando jaeles..."
    mkdir -p "jaeles"
    echo "#!/bin/bash" > "jaeles/jaeles"
    echo "echo '🛠️ Executando jaeles...'" >> "jaeles/jaeles"
    echo "# Implementação específica do jaeles" >> "jaeles/jaeles"
    chmod +x "jaeles/jaeles"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/jaeles" ]; then
        ln -sf "$CATEGORY_DIR/jaeles/jaeles" "/usr/local/bin/jaeles"
    fi
fi


# Criar script de conveniência para a categoria
cat > "vulnerability_scanners-suite.sh" << 'SUITE_EOF'
#!/bin/bash
# SecurityForge VULNERABILITY SCANNERS Suite

echo "🛡️ Scanners de vulnerabilidades e análise de segurança automatizada"
echo "Prioridade: critical"
echo ""
echo "🔧 Ferramentas disponíveis:"
ls -1 "/opt/securityforge/tools/vulnerability_scanners/" | grep -v "\.sh$"
echo ""
echo "💡 Para usar uma ferramenta específica:"
echo "   cd /opt/securityforge/tools/vulnerability_scanners/<ferramenta>"
echo "   ./<ferramenta>"
echo ""
SUITE_EOF

chmod +x "vulnerability_scanners-suite.sh"

# Criar link simbólico global
if [ ! -f "/usr/local/bin/secforge-vulnerability_scanners" ]; then
    ln -sf "$CATEGORY_DIR/vulnerability_scanners-suite.sh" "/usr/local/bin/secforge-vulnerability_scanners"
fi

# Configurar permissões
chown -R secforge:secforge "$CATEGORY_DIR" 2>/dev/null || warning "Usuário secforge não encontrado"
chmod -R 755 "$CATEGORY_DIR"

success "Categoria vulnerability_scanners instalada!"
echo "💡 Use: secforge-vulnerability_scanners para acessar ferramentas da categoria"
echo "📁 Localização: $CATEGORY_DIR"
