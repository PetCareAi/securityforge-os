#!/bin/bash
# SecurityForge Linux - Instalação de EXPLOITATION

set -euo pipefail

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }

echo "📦 Instalando Frameworks de exploração, desenvolvimento de payloads e post-exploitation..."

CATEGORY_DIR="/opt/securityforge/tools/exploitation"
mkdir -p "$CATEGORY_DIR"
cd "$CATEGORY_DIR"

# Ferramentas via APT
log "Instalando ferramentas via APT..."
apt-get install -y metasploit-framework msfvenom msfconsole armitage cobalt-strike empire powershell-empire covenant merlin sliver mythic havoc bloodhound sharphound bloodhound-python || warning "Algumas ferramentas APT podem ter falhado"

# Ferramentas via pip3
log "Instalando ferramentas Python..."
pip3 install  || warning "Algumas ferramentas Python podem ter falhado"

# Ferramentas via Go
log "Instalando ferramentas Go..."


# Ferramentas específicas do GitHub
log "Instalando ferramentas especializadas..."


# metasploit-framework
if [ ! -d "metasploit-framework" ]; then
    log "Configurando metasploit-framework..."
    mkdir -p "metasploit-framework"
    echo "#!/bin/bash" > "metasploit-framework/metasploit-framework"
    echo "echo '🛠️ Executando metasploit-framework...'" >> "metasploit-framework/metasploit-framework"
    echo "# Implementação específica do metasploit-framework" >> "metasploit-framework/metasploit-framework"
    chmod +x "metasploit-framework/metasploit-framework"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/metasploit-framework" ]; then
        ln -sf "$CATEGORY_DIR/metasploit-framework/metasploit-framework" "/usr/local/bin/metasploit-framework"
    fi
fi


# msfvenom
if [ ! -d "msfvenom" ]; then
    log "Configurando msfvenom..."
    mkdir -p "msfvenom"
    echo "#!/bin/bash" > "msfvenom/msfvenom"
    echo "echo '🛠️ Executando msfvenom...'" >> "msfvenom/msfvenom"
    echo "# Implementação específica do msfvenom" >> "msfvenom/msfvenom"
    chmod +x "msfvenom/msfvenom"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/msfvenom" ]; then
        ln -sf "$CATEGORY_DIR/msfvenom/msfvenom" "/usr/local/bin/msfvenom"
    fi
fi


# msfconsole
if [ ! -d "msfconsole" ]; then
    log "Configurando msfconsole..."
    mkdir -p "msfconsole"
    echo "#!/bin/bash" > "msfconsole/msfconsole"
    echo "echo '🛠️ Executando msfconsole...'" >> "msfconsole/msfconsole"
    echo "# Implementação específica do msfconsole" >> "msfconsole/msfconsole"
    chmod +x "msfconsole/msfconsole"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/msfconsole" ]; then
        ln -sf "$CATEGORY_DIR/msfconsole/msfconsole" "/usr/local/bin/msfconsole"
    fi
fi


# armitage
if [ ! -d "armitage" ]; then
    log "Configurando armitage..."
    mkdir -p "armitage"
    echo "#!/bin/bash" > "armitage/armitage"
    echo "echo '🛠️ Executando armitage...'" >> "armitage/armitage"
    echo "# Implementação específica do armitage" >> "armitage/armitage"
    chmod +x "armitage/armitage"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/armitage" ]; then
        ln -sf "$CATEGORY_DIR/armitage/armitage" "/usr/local/bin/armitage"
    fi
fi


# cobalt-strike
if [ ! -d "cobalt-strike" ]; then
    log "Configurando cobalt-strike..."
    mkdir -p "cobalt-strike"
    echo "#!/bin/bash" > "cobalt-strike/cobalt-strike"
    echo "echo '🛠️ Executando cobalt-strike...'" >> "cobalt-strike/cobalt-strike"
    echo "# Implementação específica do cobalt-strike" >> "cobalt-strike/cobalt-strike"
    chmod +x "cobalt-strike/cobalt-strike"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/cobalt-strike" ]; then
        ln -sf "$CATEGORY_DIR/cobalt-strike/cobalt-strike" "/usr/local/bin/cobalt-strike"
    fi
fi


# empire
if [ ! -d "empire" ]; then
    log "Configurando empire..."
    mkdir -p "empire"
    echo "#!/bin/bash" > "empire/empire"
    echo "echo '🛠️ Executando empire...'" >> "empire/empire"
    echo "# Implementação específica do empire" >> "empire/empire"
    chmod +x "empire/empire"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/empire" ]; then
        ln -sf "$CATEGORY_DIR/empire/empire" "/usr/local/bin/empire"
    fi
fi


# powershell-empire
if [ ! -d "powershell-empire" ]; then
    log "Configurando powershell-empire..."
    mkdir -p "powershell-empire"
    echo "#!/bin/bash" > "powershell-empire/powershell-empire"
    echo "echo '🛠️ Executando powershell-empire...'" >> "powershell-empire/powershell-empire"
    echo "# Implementação específica do powershell-empire" >> "powershell-empire/powershell-empire"
    chmod +x "powershell-empire/powershell-empire"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/powershell-empire" ]; then
        ln -sf "$CATEGORY_DIR/powershell-empire/powershell-empire" "/usr/local/bin/powershell-empire"
    fi
fi


# covenant
if [ ! -d "covenant" ]; then
    log "Configurando covenant..."
    mkdir -p "covenant"
    echo "#!/bin/bash" > "covenant/covenant"
    echo "echo '🛠️ Executando covenant...'" >> "covenant/covenant"
    echo "# Implementação específica do covenant" >> "covenant/covenant"
    chmod +x "covenant/covenant"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/covenant" ]; then
        ln -sf "$CATEGORY_DIR/covenant/covenant" "/usr/local/bin/covenant"
    fi
fi


# merlin
if [ ! -d "merlin" ]; then
    log "Configurando merlin..."
    mkdir -p "merlin"
    echo "#!/bin/bash" > "merlin/merlin"
    echo "echo '🛠️ Executando merlin...'" >> "merlin/merlin"
    echo "# Implementação específica do merlin" >> "merlin/merlin"
    chmod +x "merlin/merlin"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/merlin" ]; then
        ln -sf "$CATEGORY_DIR/merlin/merlin" "/usr/local/bin/merlin"
    fi
fi


# sliver
if [ ! -d "sliver" ]; then
    log "Configurando sliver..."
    mkdir -p "sliver"
    echo "#!/bin/bash" > "sliver/sliver"
    echo "echo '🛠️ Executando sliver...'" >> "sliver/sliver"
    echo "# Implementação específica do sliver" >> "sliver/sliver"
    chmod +x "sliver/sliver"
    
    # Criar link simbólico se necessário
    if [ ! -f "/usr/local/bin/sliver" ]; then
        ln -sf "$CATEGORY_DIR/sliver/sliver" "/usr/local/bin/sliver"
    fi
fi


# Criar script de conveniência para a categoria
cat > "exploitation-suite.sh" << 'SUITE_EOF'
#!/bin/bash
# SecurityForge EXPLOITATION Suite

echo "🛡️ Frameworks de exploração, desenvolvimento de payloads e post-exploitation"
echo "Prioridade: critical"
echo ""
echo "🔧 Ferramentas disponíveis:"
ls -1 "/opt/securityforge/tools/exploitation/" | grep -v "\.sh$"
echo ""
echo "💡 Para usar uma ferramenta específica:"
echo "   cd /opt/securityforge/tools/exploitation/<ferramenta>"
echo "   ./<ferramenta>"
echo ""
SUITE_EOF

chmod +x "exploitation-suite.sh"

# Criar link simbólico global
if [ ! -f "/usr/local/bin/secforge-exploitation" ]; then
    ln -sf "$CATEGORY_DIR/exploitation-suite.sh" "/usr/local/bin/secforge-exploitation"
fi

# Configurar permissões
chown -R secforge:secforge "$CATEGORY_DIR" 2>/dev/null || warning "Usuário secforge não encontrado"
chmod -R 755 "$CATEGORY_DIR"

success "Categoria exploitation instalada!"
echo "💡 Use: secforge-exploitation para acessar ferramentas da categoria"
echo "📁 Localização: $CATEGORY_DIR"
